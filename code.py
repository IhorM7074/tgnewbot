
import requests
import logging
import numpy as np
import talib
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, CallbackContext, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# --- –°–ª–æ–≤–∞—Ä–∏ —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö ---
TEXTS = {
    'ru': {
        'start_message': "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–ª–∏ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, 12 SUI USDT):",
        'help_message_header': "üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**\n\n",
        'help_message_calculation_header': "**–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:**\n",
        'help_message_calculation_text': "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –ø–∞—Ä—É –º–æ–Ω–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: `12 SUI USDT` –∏–ª–∏ `0.5 ETH BTC`.\n"
                                        "- –ë–æ—Ç –≤–µ—Ä–Ω–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–≤–æ–π –º–æ–Ω–µ—Ç—ã –≤–æ –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç–µ.\n"
                                        "- –î–ª—è USDT –ø–∞—Ä, —Ü–µ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö ($).\n"
                                        "- –î–ª—è –∫—Ä–∏–ø—Ç–æ-–∫—Ä–∏–ø—Ç–æ –ø–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, ETH BTC), —Ü–µ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –≤–æ –≤—Ç–æ—Ä–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.\n\n",
        'help_message_calculation_examples_header': "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:**\n",
        'help_message_calculation_examples_text': "- `12 SUI USDT` -  —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å 12 SUI –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê.\n"
                                                 "- `0.5 ETH BTC` - —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å 0.5 ETH –≤ BTC.\n\n",
        'help_message_technical_analysis_header': "**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä) —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏:**\n",
        'help_message_technical_analysis_text': "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `BTC`, `ETH`, `SUI`). –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç:\n"
                                                  "- –¢–µ–∫—É—â—É—é —Ü–µ–Ω—É (–≤—Å–µ–≥–¥–∞)\n"
                                                  "- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö\n"
                                                  "- –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –∏ —Ç—Ä–µ–Ω–¥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞\n"
                                                  "- –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤: 1—á, 4—á, 12—á, –ù–∞–∑–∞–¥\n"
                                                  "**–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏–ª–∏ —Ä—É—Å—Å–∫–∏–π, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.**\n\n", # –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–æ–≤
        'help_message_technical_analysis_features_header': "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:**\n",
        'help_message_technical_analysis_features_text': "- RSI (–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã)\n"
                                                          "- MACD (–°—Ö–æ–∂–¥–µ–Ω–∏–µ/—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö)\n"
                                                          "- EMA (–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è) - 50 –∏ 200 –ø–µ—Ä–∏–æ–¥–æ–≤\n"
                                                          "- Bollinger Bands (–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞)\n"
                                                          "- Stochastic Oscillator (–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä)\n"
                                                          "- SMA (–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è) - 20 –∏ 50 –ø–µ—Ä–∏–æ–¥–æ–≤\n"
                                                          "- Parabolic SAR (–ü–∞—Ä–∞–±–æ–ª–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ SAR)\n"
                                                          "- ADX (–ò–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)\n"
                                                          "- Ichimoku Cloud (–û–±–ª–∞–∫–æ –ò—à–∏–º–æ–∫—É)\n"
                                                          "- –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è\n\n",
        'help_message_other_functions_header': "**–î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n",
        'help_message_other_functions_text': "- –†–∞–∑–¥–µ–ª '–¢–æ–ø 10 —Ä–æ—Å—Ç üöÄ' –∏ '–¢–æ–ø 10 –ø–∞–¥–µ–Ω–∏—è üìâ' –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ —Ä–æ—Å—Ç–∞ –∏ –ø–∞–¥–µ–Ω–∏—è –Ω–∞ Binance.\n"
                                               "- –†–∞–∑–¥–µ–ª '–ü–æ–º–æ—â—å' - —Ç–µ–∫—É—â–∞—è —Å–ø—Ä–∞–≤–∫–∞.\n"
                                               "- –†–∞–∑–¥–µ–ª 'Donat' - –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n",
        'help_message_close_button': "–ó–∞–∫—Ä—ã—Ç—å",
        'top10_rise_button': "–¢–æ–ø 10 —Ä–æ—Å—Ç üöÄ",
        'top10_fall_button': "–¢–æ–ø 10 –ø–∞–¥–µ–Ω–∏—è üìâ",
        'help_button': "‚ùì –ü–æ–º–æ—â—å",
        'donat_button': "üí∞ Donat",
        'back_button': "–ù–∞–∑–∞–¥",
        'english_button': "English",
        'russian_button': "–†—É—Å—Å–∫–∏–π", # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–†—É—Å—Å–∫–∏–π"
        'top10_rise_header': "üöÄ **–¢–æ–ø 10 –º–æ–Ω–µ—Ç —Ä–æ—Å—Ç (Binance):**\n\n",
        'top10_fall_header': "üìâ **–¢–æ–ø 10 –º–æ–Ω–µ—Ç –ø–∞–¥–µ–Ω–∏—è (Binance):**\n\n",
        'binance_data_unavailable_fallback_rise': "‚ö†Ô∏è Binance data unavailable, using CoinGecko trending as fallback for top 10 rising coins:\n\n",
        'binance_data_unavailable_fallback_fall': "‚ö†Ô∏è Binance data unavailable, using CoinGecko trending as fallback for top 10 falling coins:\n\n",
        'error_fetching_top10_rise': "‚ö†Ô∏è Error fetching top 10 rising coins.",
        'error_fetching_top10_fall': "‚ö†Ô∏è Error fetching top 10 falling coins.",
        'price_in_usdt': "{:.2f} $",
        'price_in_crypto': "{:.6f} {}",
        'error_fetching_price_usdt': "‚ö†Ô∏è Error fetching price for {} in USDT",
        'error_fetching_price_crypto': "‚ö†Ô∏è Error fetching price for {} in {}",
        'invalid_input_amount_coin_coin': "‚ö†Ô∏è Invalid input. Please use format: amount COIN1 COIN2 (e.g., 12 SUI USDT)",
        'invalid_input_amount_coin_coin_index_error': "‚ö†Ô∏è Invalid input. Please use format: amount COIN1 COIN2 (e.g., 12 SUI USDT)",
        'error_fetching_data': "‚ö†Ô∏è Error fetching data",
        'price_coin': "üí∞ **{} Price:** ${:.2f}\n",
        'change_24h': "üìà 24h Change: {:.2f}%\n",
        'signal_24h': "üîî **Signal (24h):** {}\n",
        'trend_24h': "üìä **Trend (24h):** {}",
        'button_1h': "1h",
        'button_4h': "4h",
        'button_12h': "12h",
        'not_enough_historical_data': "‚ö†Ô∏è Not enough historical data for this timeframe.",
        'timeframe_change': "üìà {} Change: {:.2f}%\n",
        'signal_timeframe': "üîî **Signal ({}):** {}\n",
        'trend_timeframe': "üìä **Trend ({}):** {}",
        'error_fetching_timeframe_data': "‚ö†Ô∏è Error fetching data for timeframe.",
        'donat_message': "üôè –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏!\n\n"
        
                         " **USDT (TRC20):** `TYndQoBjYDMn2r4GZ5JqYyS5oJvJ1tYLi7`\n\n" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π USDT TRC20 –∞–¥—Ä–µ—Å
                         
                          " **BTC:** `bc1qcategq6gf69ytjz9a8ldavy2yjuc6f67zexsns`\n" # 
                         
                          "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
        'language_switch_developing': "–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!", # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'trend_ascending': "üü¢ –í–æ—Å—Ö–æ–¥—è—â–∏–π",
        'trend_descending': "üî¥ –ù–∏—Å—Ö–æ–¥—è—â–∏–π",
        'trend_sideways': "‚ûñ –ë–æ–∫–æ–≤–æ–π",
        'trend_strength_strong': " (–°–∏–ª—å–Ω—ã–π)",
        'trend_strength_weak': " (–°–ª–∞–±—ã–π)",
        'signal_buy': "BUY üìà",
        'signal_sell': "SELL üìâ",
        'signal_hold': "HOLD ‚öñ",
        'interval_1h': '1h',
        'interval_4h': '4h',
        'interval_8h': '8h', # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è 8h, —Ö–æ—Ç—è —Å–µ–π—á–∞—Å –∫–Ω–æ–ø–∫–∞ 4h
        'interval_12h': '12h',
        'interval_24h': '24h',
        'interval_1d': '24h', # –∏–ª–∏ '1d', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ "1 day"
        'interval_change': 'Change',

    },
    'en': {
        'start_message': "üìä Choose an action or enter a ticker or request (e.g., BTC, 12 SUI USDT):",
        'help_message_header': "üí° **How to use the bot:**\n\n",
        'help_message_calculation_header': "**For price calculation:**\n",
        'help_message_calculation_text': "Enter the amount and coin pair, for example: `12 SUI USDT` or `0.5 ETH BTC`.\n"
                                        "- The bot will return the value of the specified amount of the first coin in the second currency.\n"
                                        "- For USDT pairs, the price will be shown in dollars ($).\n"
                                        "- For crypto-crypto pairs (e.g., ETH BTC), the price will be shown in the second cryptocurrency.\n\n",
        'help_message_calculation_examples_header': "**Examples of calculation requests:**\n",
        'help_message_calculation_examples_text': "- `12 SUI USDT` - find out the cost of 12 SUI in US dollars.\n"
                                                 "- `0.5 ETH BTC` - find out the cost of 0.5 ETH in BTC.\n\n",
        'help_message_technical_analysis_header': "**To get technical analysis (calculator) with different timeframes:**\n",
        'help_message_technical_analysis_text': "Just enter the coin ticker (e.g., `BTC`, `ETH`, `SUI`). The bot will show:\n"
                                                  "- Current price (always)\n"
                                                  "- Price change for the selected timeframe in percent\n"
                                                  "- Trading signal and trend for the selected timeframe\n"
                                                  "- Buttons to switch to technical analysis for timeframes: 1h, 4h, 12h, Back\n"
                                                  "**You can switch the bot language to English or Russian by pressing the corresponding buttons below.**\n\n", # –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–æ–≤
        'help_message_technical_analysis_features_header': "**Supported technical analysis functions:**\n",
        'help_message_technical_analysis_features_text': "- RSI (Relative Strength Index)\n"
                                                          "- MACD (Moving Average Convergence/Divergence)\n"
                                                          "- EMA (Exponential Moving Average) - 50 and 200 periods\n"
                                                          "- Bollinger Bands\n"
                                                          "- Stochastic Oscillator\n"
                                                          "- SMA (Simple Moving Average) - 20 and 50 periods\n"
                                                          "- Parabolic SAR (Parabolic SAR system)\n"
                                                          "- ADX (Average Directional Index)\n"
                                                          "- Ichimoku Cloud\n"
                                                          "- Support and resistance levels\n\n",
        'help_message_other_functions_header': "**Other functions:**\n",
        'help_message_other_functions_text': "- The 'Top 10 Rise üöÄ' and 'Top 10 Fall üìâ' sections show the top gainers and losers on Binance.\n"
                                               "- The 'Help' section - current help.\n"
                                               "- The 'Donat' section - to support the developer.\n",
        'help_message_close_button': "Close",
        'top10_rise_button': "Top 10 Rise üöÄ",
        'top10_fall_button': "Top 10 Fall üìâ",
        'help_button': "‚ùì Help",
        'donat_button': "üí∞ Donate",
        'back_button': "Back",
        'english_button': "English",
        'russian_button': "Russian", # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–†—É—Å—Å–∫–∏–π"
        'top10_rise_header': "üöÄ **Top 10 Rising Coins (Binance):**\n\n",
        'top10_fall_header': "üìâ **Top 10 Falling Coins (Binance):**\n\n",
        'binance_data_unavailable_fallback_rise': "‚ö†Ô∏è Binance data unavailable, using CoinGecko trending as fallback for top 10 rising coins:\n\n",
        'binance_data_unavailable_fallback_fall': "‚ö†Ô∏è Binance data unavailable, using CoinGecko trending as fallback for top 10 falling coins:\n\n",
        'error_fetching_top10_rise': "‚ö†Ô∏è Error fetching top 10 rising coins.",
        'error_fetching_top10_fall': "‚ö†Ô∏è Error fetching top 10 falling coins.",
        'price_in_usdt': "{:.2f} $",
        'price_in_crypto': "{:.6f} {}",
        'error_fetching_price_usdt': "‚ö†Ô∏è Error fetching price for {} in USDT",
        'error_fetching_price_crypto': "‚ö†Ô∏è Error fetching price for {} in {}",
        'invalid_input_amount_coin_coin': "‚ö†Ô∏è Invalid input. Please use format: amount COIN1 COIN2 (e.g., 12 SUI USDT)",
        'invalid_input_amount_coin_coin_index_error': "‚ö†Ô∏è Invalid input. Please use format: amount COIN1 COIN2 (e.g., 12 SUI USDT)",
        'error_fetching_data': "‚ö†Ô∏è Error fetching data",
        'price_coin': "üí∞ **{} Price:** ${:.2f}\n",
        'change_24h': "üìà 24h Change: {:.2f}%\n",
        'signal_24h': "üîî **Signal (24h):** {}\n",
        'trend_24h': "üìä **Trend (24h):** {}",
        'button_1h': "1h",
        'button_4h': "4h",
        'button_12h': "12h",
        'not_enough_historical_data': "‚ö†Ô∏è Not enough historical data for this timeframe.",
        'timeframe_change': "üìà {} Change: {:.2f}%\n",
        'signal_timeframe': "üîî **Signal ({}):** {}\n",
        'trend_timeframe': "üìä **Trend ({}):** {}",
        'error_fetching_timeframe_data': "‚ö†Ô∏è Error fetching data for timeframe.",
        'donat_message': "üôè Support the developer so that the bot continues to delight you with new features and improvements!\n\n"
                         # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π QIWI –Ω–æ–º–µ—Ä
                         " **USDT (TRC20):** `TYndQoBjYDMn2r4GZ5JqYyS5oJvJ1tYLi7`\n\n"
                          " **BTC:** `bc1qcategq6gf69ytjz9a8ldavy2yjuc6f67zexsns`\n" 
                         "Thank you for your support!",
        'language_switch_developing': "Language switch to English is under development!", # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        'trend_ascending': "üü¢ Ascending",
        'trend_descending': "üî¥ Descending",
        'trend_sideways': "‚ûñ Sideways",
        'trend_strength_strong': " (Strong)",
        'trend_strength_weak': " (Weak)",
        'signal_buy': "BUY üìà",
        'signal_sell': "SELL üìâ",
        'signal_hold': "HOLD ‚öñ",
        'interval_1h': '1h',
        'interval_4h': '4h',
        'interval_8h': '8h', # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è 8h, —Ö–æ—Ç—è —Å–µ–π—á–∞—Å –∫–Ω–æ–ø–∫–∞ 4h
        'interval_12h': '12h',
        'interval_24h': '24h',
        'interval_1d': '24h', # –∏–ª–∏ '1d', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ "1 day"
        'interval_change': 'Change',
    },
}

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —è–∑—ã–∫–∞ ---
BOT_LANGUAGE = 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫


def get_binance_price(coin_id: str):
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        params = {'symbol': f"{coin_id.upper()}USDT"}
        response = requests.get(url, params=params)
        response.raise_for_status()
        ticker = response.json()
        return ticker
    except Exception as e:
        logger.error(f"Binance error: {e}")
        return None

def get_binance_price_direct(coin1_id: str, coin2_id: str):
    try:
        symbol = f"{coin1_id.upper()}{coin2_id.upper()}"
        url = "https://api.binance.com/api/v3/ticker/price"
        params = {'symbol': symbol}
        response = requests.get(url, params=params)
        response.raise_for_status()
        price_data = response.json()
        return float(price_data['price'])
    except Exception as e:
        logger.error(f"Binance direct price error: {e}")
        return None


def get_trending_coins():
    try:
        url = "https://api.coingecko.com/api/v3/search/trending"
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return [
            (coin["item"]["symbol"].upper(),
             coin["item"]["name"],
             float(coin["item"]["data"]["price"].replace(',', '')),  # Convert to float and remove commas
             float(coin["item"]["data"]["price_change_percentage_24h"]["usd"]))
            for coin in data["coins"][:10]  # Get top 10 trending coins
        ]
    except Exception as e:
        logger.error(f"Coingecko error: {e}")
        return None


def get_binance_top_movers(limit=10, sort_by='priceChangePercent', ascending=False):
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        response = requests.get(url)
        response.raise_for_status()
        tickers = response.json()

        # Filter USDT pairs and remove pairs without USDT
        usdt_tickers = [
            ticker for ticker in tickers if ticker['symbol'].endswith('USDT') and ticker['symbol'] != 'USDTUSDT'
        ]

        # Sort tickers
        sorted_tickers = sorted(
            usdt_tickers,
            key=lambda x: float(x[sort_by]),
            reverse=not ascending  # ascending=False for —Ä–æ—Å—Ç (–ø–æ —É–±—ã–≤–∞–Ω–∏—é), ascending=True –¥–ª—è –ø–∞–¥–µ–Ω–∏—è (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
        )

        top_movers = []
        for ticker in sorted_tickers[:limit]:
            symbol = ticker['symbol'].replace('USDT', '')
            top_movers.append((
                symbol,
                symbol,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º–≤–æ–ª –∫–∞–∫ –∏–º—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                float(ticker['lastPrice']),
                float(ticker['priceChangePercent'])
            ))
        return top_movers

    except Exception as e:
        logger.error(f"Binance top movers error: {e}")
        return None


def get_coingecko_top_movers_fallback(limit=10, sort_by_index=3, ascending=False):
    trending_coins = get_trending_coins() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã –∫–∞–∫ fallback
    if trending_coins:
        sorted_coins = sorted(
            trending_coins,
            key=lambda x: x[sort_by_index],
            reverse=not ascending
        )
        return sorted_coins[:limit]
    return None


async def handle_top10_rise(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    top_risers = get_binance_top_movers(sort_by='priceChangePercent', ascending=False)

    if not top_risers:
        top_risers = get_coingecko_top_movers_fallback(sort_by_index=3, ascending=False)
        if not top_risers:
            await query.edit_message_text(TEXTS[BOT_LANGUAGE]['error_fetching_top10_rise'])
            return
        else:
            message = TEXTS[BOT_LANGUAGE]['binance_data_unavailable_fallback_rise']
    else:
        message = TEXTS[BOT_LANGUAGE]['top10_rise_header']

    for coin in top_risers:
        coin_id, coin_name, price, change_24h = coin
        message += (f"üìà **{coin_name} ({coin_id})**: ${price:.2f}\n"
                    f"üìà 24h Change: {change_24h:+.2f}%\n\n")

    await query.edit_message_text(message, parse_mode="Markdown")


async def handle_top10_fall(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    top_fallers = get_binance_top_movers(sort_by='priceChangePercent', ascending=True)

    if not top_fallers:
        top_fallers = get_coingecko_top_movers_fallback(sort_by_index=3, ascending=True)
        if not top_fallers:
            await query.edit_message_text(TEXTS[BOT_LANGUAGE]['error_fetching_top10_fall'])
            return
        else:
            message = TEXTS[BOT_LANGUAGE]['binance_data_unavailable_fallback_fall']
    else:
        message = TEXTS[BOT_LANGUAGE]['top10_fall_header']

    for coin in top_fallers:
        coin_id, coin_name, price, change_24h = coin
        message += (f"üìâ **{coin_name} ({coin_id})**: ${price:.2f}\n"
                    f"üìâ 24h Change: {change_24h:+.2f}%\n\n")

    await query.edit_message_text(message, parse_mode="Markdown")


def calculate_indicators(prices, high, low, close, volume):
    if len(prices) < 50:
        return None

    indicators = {
        'rsi': talib.RSI(np.array(prices), timeperiod=14)[-1],
        'macd': talib.MACD(np.array(prices))[0][-1],
        'signal': talib.MACD(np.array(prices))[1][-1],
        'ema_50': talib.EMA(np.array(prices), 50)[-1],
        'ema_200': talib.EMA(np.array(prices), 200)[-1],
        'upper_bb': talib.BBANDS(np.array(prices), timeperiod=20)[0][-1],
        'lower_bb': talib.BBANDS(np.array(prices), timeperiod=20)[2][-1],
        'stoch_k': talib.STOCH(np.array(high), np.array(low), np.array(close))[0][-1],
        'stoch_d': talib.STOCH(np.array(high), np.array(low), np.array(close))[1][-1],
        'sma_20': talib.SMA(np.array(prices), 20)[-1],
        'sma_50': talib.SMA(np.array(prices), 50)[-1],
        'sar': talib.SAR(np.array(high), np.array(low))[-1],
        'volume': volume[-1]
    }
    return indicators


def calculate_support_resistance(prices, period=14):
    if len(prices) < period:
        return None, None

    supports = []
    resistances = []

    for i in range(period, len(prices)):
        window = prices[i - period:i]
        support = np.min(window)
        resistance = np.max(window)
        supports.append(support)
        resistances.append(resistance)

    return supports[-1] if supports else None, resistances[-1] if resistances else None


def calculate_adx(high, low, close, period=14):
    if len(close) < period:
        return None
    adx = talib.ADX(np.array(high), np.array(low), np.array(close), timeperiod=period)[-1]
    return adx


def calculate_ichimoku(high, low, close):
    if len(close) < 52:  # –ú–∏–Ω–∏–º—É–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Ichimoku
        return None, None, None
    conversion_line = talib.MAX(np.array(high), timeperiod=9) + talib.MIN(np.array(low), timeperiod=9) / 2
    base_line = talib.MAX(np.array(high), timeperiod=26) + talib.MIN(np.array(low), timeperiod=26) / 2
    leading_span_a = (conversion_line + base_line) / 2
    leading_span_b = talib.MAX(np.array(high), timeperiod=52) + talib.MIN(np.array(low), timeperiod=52) / 2
    return conversion_line[-1], base_line[-1], leading_span_b[-1]


def determine_trend(ema_50, ema_200, current_price, previous_price):
    trend_text = ""
    strength_text = ""

    if ema_50 and ema_200:
        if ema_50 > ema_200:
            trend_text += TEXTS[BOT_LANGUAGE]['trend_ascending']
        else:
            trend_text += TEXTS[BOT_LANGUAGE]['trend_descending']

    if current_price and previous_price:
        price_change = current_price - previous_price
        if abs(price_change) > 0.05 * current_price:
            strength_text = TEXTS[BOT_LANGUAGE]['trend_strength_strong']
        else:
            strength_text = TEXTS[BOT_LANGUAGE]['trend_strength_weak']
        if price_change > 0:
            trend_text += " üìà"
        else:
            trend_text += " üìâ"

    return trend_text + strength_text if trend_text else TEXTS[BOT_LANGUAGE]['trend_sideways']


def get_trading_signal(coin_id: str, interval='1d'):
    hist_data = get_historical_data(coin_id, interval) # Pass interval to historical data function
    if not hist_data or len(hist_data) < 50:
        return TEXTS[BOT_LANGUAGE]['error_fetching_data'], ""

    high = [h for h, _, _, _ in hist_data]
    low = [l for _, l, _, _ in hist_data]
    close = [c for _, _, c, _ in hist_data]
    volume = [v for _, _, _, v in hist_data]
    prices = close

    indicators = calculate_indicators(prices, high, low, close, volume)
    support, resistance = calculate_support_resistance(prices)

    buy_signals = sell_signals = 0

    # –°–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—É–∂–µ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
    if close[-1] <= indicators['lower_bb']:
        buy_signals += 1
    elif close[-1] >= indicators['upper_bb']:
        sell_signals += 1

    if indicators['stoch_k'] < 20:
        buy_signals += 1
    elif indicators['stoch_k'] > 80:
        sell_signals += 1

    if indicators['sma_20'] > indicators['sma_50']:
        buy_signals += 1
    elif indicators['sma_20'] < indicators['sma_50']:
        sell_signals += 1

    if indicators['volume'] > np.mean(volume[-5:]) * 1.5:
        if close[-1] > close[-2]:
            buy_signals += 1
        else:
            sell_signals += 1

    if close[-1] > indicators['sar']:
        buy_signals += 1
    else:
        sell_signals += 1

    if support and resistance:
        if close[-1] <= support * 1.005:
            buy_signals += 1
        elif close[-1] >= resistance * 0.995:
            sell_signals += 1

    if indicators['rsi'] > 70:
        sell_signals += 1
    elif indicators['rsi'] < 30:
        buy_signals += 1

    if indicators['macd'] > indicators['signal']:
        buy_signals += 1
    elif indicators['macd'] < indicators['signal']:
        sell_signals += 1

    if indicators['ema_50'] > indicators['ema_200']:
        buy_signals += 1
    elif indicators['ema_50'] < indicators['ema_200']:
        sell_signals += 1

    # –ù–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã:
    # ADX
    adx = calculate_adx(high, low, close)
    if adx and adx > 25:
        buy_signals += 1

    # Ichimoku
    conversion_line, base_line, leading_span_b = calculate_ichimoku(high, low, close)
    if conversion_line and base_line and leading_span_b:
        if close[-1] > conversion_line and close[-1] > base_line:
            buy_signals += 1
        elif close[-1] < conversion_line and close[-1] < base_line:
            sell_signals += 1

    signal_text = TEXTS[BOT_LANGUAGE]['signal_buy'] if buy_signals > sell_signals else TEXTS[BOT_LANGUAGE]['signal_sell'] if sell_signals > buy_signals else TEXTS[BOT_LANGUAGE]['signal_hold']

    trend = determine_trend(
        indicators['ema_50'],
        indicators['ema_200'],
        close[-1],
        close[-2] if len(close) > 1 else None
    )

    return signal_text, trend


def get_historical_data(coin_id: str, interval='1d'): # Added interval parameter
    try:
        if interval == '24h': # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å '1d' –¥–ª—è 24h
            binance_interval = '1d'
        elif interval == '8h':
            binance_interval = '8h'
        elif interval == '4h': # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è 4h
            binance_interval = '4h'
        else:
            binance_interval = interval

        url = f"https://api.binance.com/api/v3/klines?symbol={coin_id}USDT&interval={binance_interval}&limit=200" # Use interval in API request
        print(f"URL –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {url}") # –í—ã–≤–æ–¥ URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        response = requests.get(url)
        response.raise_for_status()
        hist_data_json = response.json()
        print(f"–ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ({interval}): {hist_data_json[:5]}") # –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return [
            (float(c[2]),  # high
             float(c[3]),  # low
             float(c[4]),  # close
             float(c[5]))  # volume
            for c in hist_data_json
        ]
    except Exception as e:
        logger.error(f"Historical data error: {e}")
        return None


async def handle_text(update: Update, context: CallbackContext):
    text = update.message.text.strip().upper()
    parts = text.split()

    if len(parts) >= 3: # Check if it's a calculation request (amount COIN1 COIN2)
        try:
            amount = float(parts[0])
            coin1_id = parts[1]
            coin2_id = parts[2]

            if coin2_id.upper() == "USDT":
                price_data = get_binance_price(coin1_id)
                if price_data:
                    price_usdt = float(price_data['lastPrice'])
                    calculated_value = amount * price_usdt
                    message = TEXTS[BOT_LANGUAGE]['price_in_usdt'].format(calculated_value)
                    await update.message.reply_text(message)
                else:
                    await update.message.reply_text(TEXTS[BOT_LANGUAGE]['error_fetching_price_usdt'].format(coin1_id))

            else: # Calculate in terms of another crypto (not USDT)
                direct_price = get_binance_price_direct(coin1_id, coin2_id)
                if direct_price:
                    calculated_value = amount * direct_price
                    message = TEXTS[BOT_LANGUAGE]['price_in_crypto'].format(calculated_value, coin2_id.upper()) # More decimal places for crypto-crypto pairs
                    await update.message.reply_text(message)
                else:
                    await update.message.reply_text(TEXTS[BOT_LANGUAGE]['error_fetching_price_crypto'].format(coin1_id, coin2_id))


        except ValueError:
            await update.message.reply_text(TEXTS[BOT_LANGUAGE]['invalid_input_amount_coin_coin'])
        except IndexError:
            await update.message.reply_text(TEXTS[BOT_LANGUAGE]['invalid_input_amount_coin_coin_index_error'])


    else: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ç–∏–∫–µ—Ä –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑)
        coin_id = text
        price_data = get_binance_price(coin_id)

        if not price_data:
            await update.message.reply_text(TEXTS[BOT_LANGUAGE]['error_fetching_data'])
            return

        price = float(price_data['lastPrice'])
        change_24h = float(price_data['priceChangePercent'])
        high = float(price_data['highPrice'])
        low = float(price_data['lowPrice'])

        signal_text, trend_text = get_trading_signal(coin_id) # Default 1d interval

        message = (TEXTS[BOT_LANGUAGE]['price_coin'].format(coin_id, price) +
                   TEXTS[BOT_LANGUAGE]['change_24h'].format(change_24h) +
                   TEXTS[BOT_LANGUAGE]['signal_24h'].format(signal_text) +
                   TEXTS[BOT_LANGUAGE]['trend_24h'].format(trend_text))

        keyboard = [
            [
                InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['button_1h'], callback_data=f"{coin_id}_1h"), # Callback data: TICKER_INTERVAL
                InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['button_4h'], callback_data=f"{coin_id}_4h"), # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 4h
            ],
            [
                InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['button_12h'], callback_data=f"{coin_id}_12h"),
                InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['back_button'], callback_data=f"{coin_id}_back"), # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)


async def handle_timeframe_data(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    data = query.data.split("_") # Parse callback data: TICKER_INTERVAL
    coin_id = data[0]
    interval = data[1]

    if interval == 'back': # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await query.edit_message_reply_markup(reply_markup=None) # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        return


    print(f"–í—ã–±—Ä–∞–Ω —Ç–∞–π–º—Ñ—Ä–µ–π–º: {interval}") # –í—ã–≤–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    hist_data = get_historical_data(coin_id, interval) # Get historical data for the selected interval
    if not hist_data or len(hist_data) < 2: # Need at least two points to calculate change
        await query.edit_message_text(TEXTS[BOT_LANGUAGE]['not_enough_historical_data'])
        return

    # Calculate percentage change for the selected interval
    if interval == '4h': # –ò–∑–º–µ–Ω–µ–Ω —Ä–∞—Å—á–µ—Ç –¥–ª—è 4h –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if len(hist_data) >= 2:
            first_price = hist_data[1][2] # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è 4—á —Å–≤–µ—á–∏ *–ø–µ—Ä–µ–¥* –ø–æ—Å–ª–µ–¥–Ω–µ–π
            last_price = hist_data[0][2]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è *–ø–æ—Å–ª–µ–¥–Ω–µ–π* 4—á —Å–≤–µ—á–∏
            interval_change_percent = ((last_price - first_price) / first_price) * 100
        else:
            interval_change_percent = 0.0 # –ò–ª–∏ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ—à–∏–±–∫—É
    else: # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ - —Å—Ç–∞—Ä—ã–π —Ä–∞—Å—á–µ—Ç (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥)
        first_price = hist_data[-1][2] # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        last_price = hist_data[0][2]  # –°–∞–º–∞—è –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        interval_change_percent = ((last_price - first_price) / first_price) * 100


    print(f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {interval}, –ü–µ—Ä–≤–∞—è —Ü–µ–Ω–∞: {first_price}, –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {last_price}, –ü—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: {interval_change_percent:.2f}%") #  <<<---  –î–û–ë–ê–í–õ–ï–ù–ê –û–¢–õ–ê–î–ö–ê


    signal_text, trend_text = get_trading_signal(coin_id, interval) # Get signal for specific interval
    price_data = get_binance_price(coin_id) # Get current price for header

    if not price_data: # Handle error if price data is not available
        await query.edit_message_text(TEXTS[BOT_LANGUAGE]['error_fetching_timeframe_data'])
        return

    price = float(price_data['lastPrice'])


    message = (TEXTS[BOT_LANGUAGE]['price_coin'].format(coin_id, price) +
               TEXTS[BOT_LANGUAGE]['timeframe_change'].format(get_interval_label(interval, BOT_LANGUAGE), interval_change_percent) +
               TEXTS[BOT_LANGUAGE]['signal_timeframe'].format(interval, signal_text) +
               TEXTS[BOT_LANGUAGE]['trend_timeframe'].format(interval, trend_text))

    keyboard = [ # Re-create keyboard with 4h and "Back"
        [
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['button_1h'], callback_data=f"{coin_id}_1h"),
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['button_4h'], callback_data=f"{coin_id}_4h"), # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ 4h
        ],
        [
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['button_12h'], callback_data=f"{coin_id}_12h"),
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['back_button'], callback_data=f"{coin_id}_back"), # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)


    await query.edit_message_text(message, parse_mode="Markdown", reply_markup=reply_markup) # Re-add reply_markup to edit_message_text

def get_interval_label(interval, lang='ru'): # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–µ–π–±–ª–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
    interval_labels = {
        'ru': {
            '1h': TEXTS['ru']['interval_1h'],
            '4h': TEXTS['ru']['interval_4h'],
            '8h': TEXTS['ru']['interval_8h'],
            '12h': TEXTS['ru']['interval_12h'],
            '24h': TEXTS['ru']['interval_24h'],
            '1d': TEXTS['ru']['interval_1d'],
            'Change': TEXTS['ru']['interval_change'],
        },
        'en': {
            '1h': TEXTS['en']['interval_1h'],
            '4h': TEXTS['en']['interval_4h'],
            '8h': TEXTS['en']['interval_8h'],
            '12h': TEXTS['en']['interval_12h'],
            '24h': TEXTS['en']['interval_24h'],
            '1d': TEXTS['en']['interval_1d'],
            'Change': TEXTS['en']['interval_change'],
        }
    }
    return interval_labels[lang].get(interval, TEXTS[lang]['interval_change'])


async def start(update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['top10_rise_button'], callback_data="TOP10_RISE"),
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['top10_fall_button'], callback_data="TOP10_FALL"),
        ],
        [
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['help_button'], callback_data="HELP"),
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['donat_button'], callback_data="DONAT"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        TEXTS[BOT_LANGUAGE]['start_message'],
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )


async def help(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    message = (TEXTS[BOT_LANGUAGE]['help_message_header'] +
               TEXTS[BOT_LANGUAGE]['help_message_calculation_header'] +
               TEXTS[BOT_LANGUAGE]['help_message_calculation_text'] +
               TEXTS[BOT_LANGUAGE]['help_message_calculation_examples_header'] +
               TEXTS[BOT_LANGUAGE]['help_message_calculation_examples_text'] +
               TEXTS[BOT_LANGUAGE]['help_message_technical_analysis_header'] +
               TEXTS[BOT_LANGUAGE]['help_message_technical_analysis_text'] +
               TEXTS[BOT_LANGUAGE]['help_message_technical_analysis_features_header'] +
               TEXTS[BOT_LANGUAGE]['help_message_technical_analysis_features_text'] +
               TEXTS[BOT_LANGUAGE]['help_message_other_functions_header'] +
               TEXTS[BOT_LANGUAGE]['help_message_other_functions_text'])

    keyboard = [ # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ü–æ–º–æ—â–∏" —Å –∫–Ω–æ–ø–∫–∞–º–∏ "English" –∏ "–†—É—Å—Å–∫–∏–π"
        [
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['help_message_close_button'], callback_data="CLOSE_HELP"), # –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        ],
        [
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['english_button'], callback_data="HELP_EN"), # –ö–Ω–æ–ø–∫–∞ "English"
            InlineKeyboardButton(TEXTS[BOT_LANGUAGE]['russian_button'], callback_data="HELP_RU") # –ö–Ω–æ–ø–∫–∞ "–†—É—Å—Å–∫–∏–π"
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(message, parse_mode="Markdown", reply_markup=reply_markup)


async def handle_donat(update: Update, context: CallbackContext):
    message = TEXTS[BOT_LANGUAGE]['donat_message']
    await update.callback_query.message.reply_text(message, parse_mode="Markdown")


async def button(update: Update, context: CallbackContext):
    global BOT_LANGUAGE  # <----  –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ global –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    query = update.callback_query
    if query.data == "TOP10_RISE":
        await handle_top10_rise(update, context)
    elif query.data == "TOP10_FALL":
        await handle_top10_fall(update, context)
    elif query.data == "HELP":
        await help(update, context)
    elif query.data == "DONAT":
        await handle_donat(update, context)
    elif query.data == "HELP_EN":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "English"
        BOT_LANGUAGE = 'en'
        await help(update, context)
        await query.answer(text="Bot language switched to English!")
    elif query.data == "HELP_RU":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†—É—Å—Å–∫–∏–π"
        BOT_LANGUAGE = 'ru'
        await help(update, context)
        await query.answer(text="–Ø–∑—ã–∫ –±–æ—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π!")
    elif "_" in query.data:  # Handle timeframe button presses
        await handle_timeframe_data(update, context)
    elif query.data == "CLOSE_HELP":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
        await close_help(update, context)


async def close_help(update: Update, context: CallbackContext): # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    query = update.callback_query
    await query.answer()
    await query.edit_message_reply_markup(reply_markup=None) # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫


def main():
    application = Application.builder().token("7418232840:AAEhnpL7h-ZZpsYfJkgeeQVChojTc0gY8pw").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT, handle_text))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()


if __name__ == "__main__":
    main()

